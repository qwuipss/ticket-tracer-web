/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BoardExistsModel extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The conflictFieldName property
     */
    conflictFieldName?: string | null;
}
export interface BoardModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The projectId property
     */
    projectId?: Guid | null;
    /**
     * The title property
     */
    title?: string | null;
}
export interface BoardNotFoundModel extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BoardExistsModel}
 */
// @ts-ignore
export function createBoardExistsModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBoardExistsModel;
}
export interface CreateBoardModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The projectId property
     */
    projectId?: Guid | null;
    /**
     * The title property
     */
    title?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BoardModel}
 */
// @ts-ignore
export function createBoardModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBoardModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BoardNotFoundModel}
 */
// @ts-ignore
export function createBoardNotFoundModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBoardNotFoundModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateBoardModel}
 */
// @ts-ignore
export function createCreateBoardModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateBoardModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateProjectModel}
 */
// @ts-ignore
export function createCreateProjectModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateProjectModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateTicketModel}
 */
// @ts-ignore
export function createCreateTicketModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateTicketModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoginAccountModel}
 */
// @ts-ignore
export function createLoginAccountModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoginAccountModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProblemDetails}
 */
// @ts-ignore
export function createProblemDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProblemDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectExistsModel}
 */
// @ts-ignore
export function createProjectExistsModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectExistsModel;
}
export interface CreateProjectModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The title property
     */
    title?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectModel}
 */
// @ts-ignore
export function createProjectModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProjectNotFoundModel}
 */
// @ts-ignore
export function createProjectNotFoundModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProjectNotFoundModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegisterAccountModel}
 */
// @ts-ignore
export function createRegisterAccountModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRegisterAccountModel;
}
export interface CreateTicketModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The boardId property
     */
    boardId?: Guid | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The title property
     */
    title?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TicketModel}
 */
// @ts-ignore
export function createTicketModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTicketModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UnhandledExceptionModel}
 */
// @ts-ignore
export function createUnhandledExceptionModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUnhandledExceptionModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserExistsModel}
 */
// @ts-ignore
export function createUserExistsModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserExistsModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserModel}
 */
// @ts-ignore
export function createUserModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserModel;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBoardExistsModel(boardExistsModel: Partial<BoardExistsModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conflictFieldName": n => { boardExistsModel.conflictFieldName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBoardModel(boardModel: Partial<BoardModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { boardModel.id = n.getGuidValue(); },
        "projectId": n => { boardModel.projectId = n.getGuidValue(); },
        "title": n => { boardModel.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBoardNotFoundModel(boardNotFoundModel: Partial<BoardNotFoundModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateBoardModel(createBoardModel: Partial<CreateBoardModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "projectId": n => { createBoardModel.projectId = n.getGuidValue(); },
        "title": n => { createBoardModel.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateProjectModel(createProjectModel: Partial<CreateProjectModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "title": n => { createProjectModel.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateTicketModel(createTicketModel: Partial<CreateTicketModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "boardId": n => { createTicketModel.boardId = n.getGuidValue(); },
        "description": n => { createTicketModel.description = n.getStringValue(); },
        "title": n => { createTicketModel.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoginAccountModel(loginAccountModel: Partial<LoginAccountModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { loginAccountModel.email = n.getStringValue(); },
        "password": n => { loginAccountModel.password = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProblemDetails(problemDetails: Partial<ProblemDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "detail": n => { problemDetails.detail = n.getStringValue(); },
        "instance": n => { problemDetails.instance = n.getStringValue(); },
        "status": n => { problemDetails.status = n.getNumberValue(); },
        "title": n => { problemDetails.title = n.getStringValue(); },
        "type": n => { problemDetails.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectExistsModel(projectExistsModel: Partial<ProjectExistsModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conflictFieldName": n => { projectExistsModel.conflictFieldName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectModel(projectModel: Partial<ProjectModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { projectModel.id = n.getGuidValue(); },
        "title": n => { projectModel.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProjectNotFoundModel(projectNotFoundModel: Partial<ProjectNotFoundModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegisterAccountModel(registerAccountModel: Partial<RegisterAccountModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { registerAccountModel.email = n.getStringValue(); },
        "name": n => { registerAccountModel.name = n.getStringValue(); },
        "password": n => { registerAccountModel.password = n.getStringValue(); },
        "surname": n => { registerAccountModel.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTicketModel(ticketModel: Partial<TicketModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "authorId": n => { ticketModel.authorId = n.getGuidValue(); },
        "boardId": n => { ticketModel.boardId = n.getGuidValue(); },
        "description": n => { ticketModel.description = n.getStringValue(); },
        "id": n => { ticketModel.id = n.getGuidValue(); },
        "number": n => { ticketModel.number = n.getNumberValue(); },
        "title": n => { ticketModel.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUnhandledExceptionModel(unhandledExceptionModel: Partial<UnhandledExceptionModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { unhandledExceptionModel.messageEscaped = n.getStringValue(); },
        "traceId": n => { unhandledExceptionModel.traceId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserExistsModel(userExistsModel: Partial<UserExistsModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "conflictFieldName": n => { userExistsModel.conflictFieldName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserModel(userModel: Partial<UserModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { userModel.email = n.getStringValue(); },
        "id": n => { userModel.id = n.getGuidValue(); },
        "name": n => { userModel.name = n.getStringValue(); },
        "surname": n => { userModel.surname = n.getStringValue(); },
    }
}
export interface LoginAccountModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The password property
     */
    password?: string | null;
}
export interface ProblemDetails extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The detail property
     */
    detail?: string | null;
    /**
     * The instance property
     */
    instance?: string | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The type property
     */
    type?: string | null;
}
export interface ProjectExistsModel extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The conflictFieldName property
     */
    conflictFieldName?: string | null;
}
export interface ProjectModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The title property
     */
    title?: string | null;
}
export interface ProjectNotFoundModel extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
export interface RegisterAccountModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The password property
     */
    password?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBoardExistsModel(writer: SerializationWriter, boardExistsModel: Partial<BoardExistsModel> | undefined | null = {}) : void {
    if (boardExistsModel) {
        writer.writeStringValue("conflictFieldName", boardExistsModel.conflictFieldName);
        writer.writeAdditionalData(boardExistsModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBoardModel(writer: SerializationWriter, boardModel: Partial<BoardModel> | undefined | null = {}) : void {
    if (boardModel) {
        writer.writeGuidValue("id", boardModel.id);
        writer.writeGuidValue("projectId", boardModel.projectId);
        writer.writeStringValue("title", boardModel.title);
        writer.writeAdditionalData(boardModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBoardNotFoundModel(writer: SerializationWriter, boardNotFoundModel: Partial<BoardNotFoundModel> | undefined | null = {}) : void {
    if (boardNotFoundModel) {
        writer.writeAdditionalData(boardNotFoundModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateBoardModel(writer: SerializationWriter, createBoardModel: Partial<CreateBoardModel> | undefined | null = {}) : void {
    if (createBoardModel) {
        writer.writeGuidValue("projectId", createBoardModel.projectId);
        writer.writeStringValue("title", createBoardModel.title);
        writer.writeAdditionalData(createBoardModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateProjectModel(writer: SerializationWriter, createProjectModel: Partial<CreateProjectModel> | undefined | null = {}) : void {
    if (createProjectModel) {
        writer.writeStringValue("title", createProjectModel.title);
        writer.writeAdditionalData(createProjectModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateTicketModel(writer: SerializationWriter, createTicketModel: Partial<CreateTicketModel> | undefined | null = {}) : void {
    if (createTicketModel) {
        writer.writeGuidValue("boardId", createTicketModel.boardId);
        writer.writeStringValue("description", createTicketModel.description);
        writer.writeStringValue("title", createTicketModel.title);
        writer.writeAdditionalData(createTicketModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoginAccountModel(writer: SerializationWriter, loginAccountModel: Partial<LoginAccountModel> | undefined | null = {}) : void {
    if (loginAccountModel) {
        writer.writeStringValue("email", loginAccountModel.email);
        writer.writeStringValue("password", loginAccountModel.password);
        writer.writeAdditionalData(loginAccountModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProblemDetails(writer: SerializationWriter, problemDetails: Partial<ProblemDetails> | undefined | null = {}) : void {
    if (problemDetails) {
        writer.writeStringValue("detail", problemDetails.detail);
        writer.writeStringValue("instance", problemDetails.instance);
        writer.writeNumberValue("status", problemDetails.status);
        writer.writeStringValue("title", problemDetails.title);
        writer.writeStringValue("type", problemDetails.type);
        writer.writeAdditionalData(problemDetails.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectExistsModel(writer: SerializationWriter, projectExistsModel: Partial<ProjectExistsModel> | undefined | null = {}) : void {
    if (projectExistsModel) {
        writer.writeStringValue("conflictFieldName", projectExistsModel.conflictFieldName);
        writer.writeAdditionalData(projectExistsModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectModel(writer: SerializationWriter, projectModel: Partial<ProjectModel> | undefined | null = {}) : void {
    if (projectModel) {
        writer.writeGuidValue("id", projectModel.id);
        writer.writeStringValue("title", projectModel.title);
        writer.writeAdditionalData(projectModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProjectNotFoundModel(writer: SerializationWriter, projectNotFoundModel: Partial<ProjectNotFoundModel> | undefined | null = {}) : void {
    if (projectNotFoundModel) {
        writer.writeAdditionalData(projectNotFoundModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegisterAccountModel(writer: SerializationWriter, registerAccountModel: Partial<RegisterAccountModel> | undefined | null = {}) : void {
    if (registerAccountModel) {
        writer.writeStringValue("email", registerAccountModel.email);
        writer.writeStringValue("name", registerAccountModel.name);
        writer.writeStringValue("password", registerAccountModel.password);
        writer.writeStringValue("surname", registerAccountModel.surname);
        writer.writeAdditionalData(registerAccountModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTicketModel(writer: SerializationWriter, ticketModel: Partial<TicketModel> | undefined | null = {}) : void {
    if (ticketModel) {
        writer.writeGuidValue("authorId", ticketModel.authorId);
        writer.writeGuidValue("boardId", ticketModel.boardId);
        writer.writeStringValue("description", ticketModel.description);
        writer.writeGuidValue("id", ticketModel.id);
        writer.writeNumberValue("number", ticketModel.number);
        writer.writeStringValue("title", ticketModel.title);
        writer.writeAdditionalData(ticketModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUnhandledExceptionModel(writer: SerializationWriter, unhandledExceptionModel: Partial<UnhandledExceptionModel> | undefined | null = {}) : void {
    if (unhandledExceptionModel) {
        writer.writeStringValue("message", unhandledExceptionModel.messageEscaped);
        writer.writeStringValue("traceId", unhandledExceptionModel.traceId);
        writer.writeAdditionalData(unhandledExceptionModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserExistsModel(writer: SerializationWriter, userExistsModel: Partial<UserExistsModel> | undefined | null = {}) : void {
    if (userExistsModel) {
        writer.writeStringValue("conflictFieldName", userExistsModel.conflictFieldName);
        writer.writeAdditionalData(userExistsModel.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserModel(writer: SerializationWriter, userModel: Partial<UserModel> | undefined | null = {}) : void {
    if (userModel) {
        writer.writeStringValue("email", userModel.email);
        writer.writeGuidValue("id", userModel.id);
        writer.writeStringValue("name", userModel.name);
        writer.writeStringValue("surname", userModel.surname);
        writer.writeAdditionalData(userModel.additionalData);
    }
}
export interface TicketModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The authorId property
     */
    authorId?: Guid | null;
    /**
     * The boardId property
     */
    boardId?: Guid | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The number property
     */
    number?: number | null;
    /**
     * The title property
     */
    title?: string | null;
}
export interface UnhandledExceptionModel extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The traceId property
     */
    traceId?: string | null;
}
export interface UserExistsModel extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The conflictFieldName property
     */
    conflictFieldName?: string | null;
}
export interface UserModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
/* tslint:enable */
/* eslint-enable */
