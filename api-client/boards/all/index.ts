/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBoardModelFromDiscriminatorValue, createProblemDetailsFromDiscriminatorValue, createUnhandledExceptionModelFromDiscriminatorValue, type BoardModel, type ProblemDetails, type UnhandledExceptionModel } from '../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /boards/all
 */
export interface AllRequestBuilder extends BaseRequestBuilder<AllRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BoardModel[]>}
     * @throws {ProblemDetails} error when the service returns a 401 status code
     * @throws {ProblemDetails} error when the service returns a 403 status code
     * @throws {ProblemDetails} error when the service returns a 404 status code
     * @throws {UnhandledExceptionModel} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<AllRequestBuilderGetQueryParameters> | undefined) : Promise<BoardModel[] | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AllRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
export interface AllRequestBuilderGetQueryParameters {
    limit?: number;
    offset?: number;
}
/**
 * Uri template for the request builder.
 */
export const AllRequestBuilderUriTemplate = "{+baseurl}/boards/all?offset={offset}{&limit*}";
/**
 * Metadata for all the requests in the request builder.
 */
export const AllRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AllRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createUnhandledExceptionModelFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createBoardModelFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
