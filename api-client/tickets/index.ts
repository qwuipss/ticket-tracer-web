/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBoardNotFoundModelFromDiscriminatorValue, createProblemDetailsFromDiscriminatorValue, createTicketModelFromDiscriminatorValue, createUnhandledExceptionModelFromDiscriminatorValue, serializeCreateTicketModel, serializeTicketModel, type BoardNotFoundModel, type CreateTicketModel, type ProblemDetails, type TicketModel, type UnhandledExceptionModel } from '../models/index.js';
// @ts-ignore
import { AllRequestBuilderRequestsMetadata, type AllRequestBuilder } from './all/index.js';
// @ts-ignore
import { AllByBoardRequestBuilderRequestsMetadata, type AllByBoardRequestBuilder } from './allByBoard/index.js';
// @ts-ignore
import { TicketsItemRequestBuilderRequestsMetadata, type TicketsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /tickets
 */
export interface TicketsRequestBuilder extends BaseRequestBuilder<TicketsRequestBuilder> {
    /**
     * The all property
     */
    get all(): AllRequestBuilder;
    /**
     * The allByBoard property
     */
    get allByBoard(): AllByBoardRequestBuilder;
    /**
     * Gets an item from the ticketTracer.Client.tickets.item collection
     * @param id Unique identifier of the item
     * @returns {TicketsItemRequestBuilder}
     */
     byId(id: Guid) : TicketsItemRequestBuilder;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TicketModel>}
     * @throws {ProblemDetails} error when the service returns a 401 status code
     * @throws {ProblemDetails} error when the service returns a 403 status code
     * @throws {BoardNotFoundModel} error when the service returns a 404 status code
     * @throws {UnhandledExceptionModel} error when the service returns a 500 status code
     */
     post(body: CreateTicketModel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TicketModel | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateTicketModel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TicketsRequestBuilderUriTemplate = "{+baseurl}/tickets";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TicketsRequestBuilderNavigationMetadata: Record<Exclude<keyof TicketsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: TicketsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
    all: {
        requestsMetadata: AllRequestBuilderRequestsMetadata,
    },
    allByBoard: {
        requestsMetadata: AllByBoardRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TicketsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: TicketsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            401: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createBoardNotFoundModelFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createUnhandledExceptionModelFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTicketModelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateTicketModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
